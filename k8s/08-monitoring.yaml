# 监控系统配置 - Prometheus & Grafana
# Monitoring System Configuration - Prometheus & Grafana

# Prometheus持久化存储
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: digital-employee
  labels:
    app: prometheus
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
# Grafana持久化存储
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: digital-employee
  labels:
    app: grafana
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: digital-employee
  labels:
    app: prometheus
    component: serviceaccount

---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
  labels:
    app: prometheus
    component: rbac
rules:
- apiGroups: [""]
  resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    - ingresses
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
    - ingresses
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources:
    - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
  labels:
    app: prometheus
    component: rbac
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: digital-employee
roleRef:
  kind: ClusterRole
  name: prometheus-role
  apiGroup: rbac.authorization.k8s.io

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: digital-employee
  labels:
    app: prometheus
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
    spec:
      serviceAccountName: prometheus-sa
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
          name: web
          protocol: TCP
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=7d'
        - '--storage.tsdb.retention.size=45GB'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        - '--web.external-url=http://prometheus:9090'
        - '--query.max-concurrency=20'
        - '--query.timeout=2m'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
          readOnly: true
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
          readOnly: true
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
            
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
# Prometheus服务
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
  namespace: digital-employee
  labels:
    app: prometheus
    component: server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus
    component: server

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: digital-employee
  labels:
    app: grafana
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: server
  template:
    metadata:
      labels:
        app: grafana
        component: server
    spec:
      serviceAccountName: digital-employee-sa
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
        runAsNonRoot: true
      initContainers:
      - name: init-grafana
        image: busybox:1.35
        imagePullPolicy: IfNotPresent
        command: 
        - sh
        - -c
        - |
          chown -R 472:472 /var/lib/grafana
          chmod -R 755 /var/lib/grafana
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: GRAFANA_PASSWORD
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_SMTP_ENABLED
          value: "true"
        - name: GF_SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: SMTP_HOST
        - name: GF_SMTP_USER
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: SMTP_USER
        - name: GF_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: SMTP_PASSWORD
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
          readOnly: true
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          capabilities:
            drop:
            - ALL
            
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc

---
# Grafana服务
apiVersion: v1
kind: Service
metadata:
  name: grafana-svc
  namespace: digital-employee
  labels:
    app: grafana
    component: server
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: grafana
  selector:
    app: grafana
    component: server

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: digital-employee
  labels:
    app: alertmanager
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
      component: server
  template:
    metadata:
      labels:
        app: alertmanager
        component: server
    spec:
      serviceAccountName: digital-employee-sa
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9093
          name: web
          protocol: TCP
        args:
        - '--config.file=/etc/alertmanager/alertmanager.yml'
        - '--storage.path=/alertmanager'
        - '--web.external-url=http://alertmanager:9093'
        - '--cluster.listen-address=0.0.0.0:9094'
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager/alertmanager.yml
          subPath: alertmanager.yml
          readOnly: true
        - name: alertmanager-storage
          mountPath: /alertmanager
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        emptyDir:
          sizeLimit: 1Gi

---
# AlertManager服务
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-svc
  namespace: digital-employee
  labels:
    app: alertmanager
    component: server
spec:
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: web
  selector:
    app: alertmanager
    component: server

---
# Prometheus Rules配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: digital-employee
  labels:
    app: prometheus
    component: rules
data:
  digital-employee.rules.yml: |
    groups:
    - name: digital-employee.rules
      rules:
      # 应用程序规则
      - alert: HighMemoryUsage
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High memory usage detected
          description: "Memory usage is above 85% for more than 5 minutes"
          
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High CPU usage detected
          description: "CPU usage is above 80% for more than 5 minutes"
          
      - alert: ApplicationDown
        expr: up{job="digital-employee-app"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Digital Employee application is down
          description: "Digital Employee application has been down for more than 1 minute"
          
      - alert: DatabaseConnectionFailed
        expr: postgresql_up == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: PostgreSQL connection failed
          description: "Cannot connect to PostgreSQL database for more than 2 minutes"
          
      - alert: RedisConnectionFailed
        expr: redis_up == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Redis connection failed
          description: "Cannot connect to Redis server for more than 2 minutes"
          
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High response time detected
          description: "95th percentile response time is above 2 seconds for more than 5 minutes"
          
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High error rate detected
          description: "Error rate is above 5% for more than 5 minutes"

---
# AlertManager配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: digital-employee
  labels:
    app: alertmanager
    component: config
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: '{{ .Values.smtp.host }}:{{ .Values.smtp.port }}'
      smtp_from: 'alerts@digital-employee.com'
      smtp_auth_username: '{{ .Values.smtp.username }}'
      smtp_auth_password: '{{ .Values.smtp.password }}'
      
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          severity: warning
        receiver: 'warning-alerts'
        
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://webhook-service:5000/alerts'
        
    - name: 'critical-alerts'
      email_configs:
      - to: 'ops-team@company.com'
        subject: '[CRITICAL] Digital Employee Alert'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#alerts'
        title: 'Critical Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        
    - name: 'warning-alerts'
      email_configs:
      - to: 'dev-team@company.com'
        subject: '[WARNING] Digital Employee Alert'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

---
# Grafana数据源配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: digital-employee
  labels:
    app: grafana
    component: datasources
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-svc:9090
      isDefault: true
      editable: true

---
# Grafana仪表板配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: digital-employee
  labels:
    app: grafana
    component: dashboards-config
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Grafana仪表板
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: digital-employee
  labels:
    app: grafana
    component: dashboards
data:
  digital-employee-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Digital Employee System Overview",
        "tags": ["digital-employee"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Application Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"digital-employee-app\"}",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {
                    "options": {
                      "0": {
                        "text": "DOWN"
                      },
                      "1": {
                        "text": "UP"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }