# 数字员工应用程序配置
# Digital Employee Application Configuration

# 应用程序持久化存储（日志和数据）
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: digital-employee-logs-pvc
  namespace: digital-employee
  labels:
    app: digital-employee
    component: logs
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: shared-storage

---
# 应用程序数据存储
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: digital-employee-data-pvc
  namespace: digital-employee
  labels:
    app: digital-employee
    component: data
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: shared-storage

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: digital-employee-sa
  namespace: digital-employee
  labels:
    app: digital-employee
    component: serviceaccount
automountServiceAccountToken: true

---
# ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: digital-employee-role
  labels:
    app: digital-employee
    component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: digital-employee-rolebinding
  labels:
    app: digital-employee
    component: rbac
subjects:
- kind: ServiceAccount
  name: digital-employee-sa
  namespace: digital-employee
roleRef:
  kind: ClusterRole
  name: digital-employee-role
  apiGroup: rbac.authorization.k8s.io

---
# 数字员工应用程序Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: digital-employee-app
  namespace: digital-employee
  labels:
    app: digital-employee
    component: app
    version: "2.0.0"
spec:
  replicas: 3  # 默认3个副本，支持高可用
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: digital-employee
      component: app
  template:
    metadata:
      labels:
        app: digital-employee
        component: app
        version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
        config.hash: "{{ .Values.configHash }}"  # 用于配置变更时自动重启
    spec:
      serviceAccountName: digital-employee-sa
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      imagePullSecrets:
      - name: digital-employee-registry
      
      # Init Container - 等待依赖服务启动
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-primary-svc -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
            
      - name: wait-for-redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-master-svc -p 6379 ping; do
            echo "Waiting for Redis to be ready..."
            sleep 5
          done
          echo "Redis is ready!"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      containers:
      # 主应用容器
      - name: digital-employee
        image: digital-employee:2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        - containerPort: 8002
          name: health
          protocol: TCP
        env:
        # 从ConfigMap获取配置
        - name: DIGITAL_EMPLOYEE_ENV
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DIGITAL_EMPLOYEE_ENV
        - name: DIGITAL_EMPLOYEE_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DIGITAL_EMPLOYEE_LOG_LEVEL
        - name: DIGITAL_EMPLOYEE_WORKERS
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DIGITAL_EMPLOYEE_WORKERS
        - name: DIGITAL_EMPLOYEE_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DIGITAL_EMPLOYEE_MAX_REQUESTS
        - name: DIGITAL_EMPLOYEE_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DIGITAL_EMPLOYEE_TIMEOUT
        - name: PROMETHEUS_METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: PROMETHEUS_METRICS_PORT
        - name: HEALTH_CHECK_PORT
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: HEALTH_CHECK_PORT
              
        # 数据库连接
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: POSTGRES_PASSWORD
              
        # Redis连接
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: REDIS_DB
              
        # API密钥
        - name: CLAUDE_API_KEY
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: CLAUDE_API_KEY
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: SECRET_KEY
              
        # Kubernetes环境变量
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
              
        volumeMounts:
        - name: app-logs
          mountPath: /var/log/digital_employee
        - name: app-data
          mountPath: /var/lib/digital_employee
        - name: tmp
          mountPath: /tmp
          
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            
        # 健康检查配置
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8002
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8002
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
          
        # 生命周期钩子
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                echo "Gracefully shutting down..."
                kill -TERM 1
                sleep 30
                
        # 安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            
      # Sidecar容器 - 日志收集
      - name: log-collector
        image: fluent/fluent-bit:2.1.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2020
          name: fluent-bit
          protocol: TCP
        volumeMounts:
        - name: app-logs  
          mountPath: /var/log/digital_employee
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/fluent-bit.conf
          subPath: fluent-bit.conf
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
            
      volumes:
      - name: app-logs
        persistentVolumeClaim:
          claimName: digital-employee-logs-pvc
      - name: app-data
        persistentVolumeClaim:
          claimName: digital-employee-data-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
          
      # Pod调度配置
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - digital-employee
              topologyKey: kubernetes.io/hostname
              
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300

---
# 数字员工应用服务
apiVersion: v1
kind: Service
metadata:
  name: digital-employee-app-svc
  namespace: digital-employee
  labels:
    app: digital-employee
    component: app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 86400  # 24小时
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  - port: 8002
    targetPort: 8002
    protocol: TCP
    name: health
  selector:
    app: digital-employee
    component: app

---
# Headless Service for StatefulSet-like behavior
apiVersion: v1
kind: Service
metadata:
  name: digital-employee-headless-svc
  namespace: digital-employee
  labels:
    app: digital-employee
    component: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: digital-employee
    component: app

---
# Fluent Bit配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: digital-employee
  labels:
    app: fluent-bit
    component: config
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Health_Check  On

    [INPUT]
        Name              tail
        Path              /var/log/digital_employee/*.log
        Parser            json
        Tag               digital-employee.*
        Refresh_Interval  5
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On

    [FILTER]
        Name                kubernetes
        Match               digital-employee.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     digital-employee.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off

    [OUTPUT]
        Name            es
        Match           digital-employee.*
        Host            elasticsearch
        Port            9200
        Index           digital-employee
        Type            _doc
        Logstash_Format On
        Logstash_Prefix digital-employee
        Retry_Limit     5
        
    [OUTPUT]
        Name   stdout
        Match  digital-employee.*
        Format json_lines