# PostgreSQL数据库集群配置
# PostgreSQL Database Cluster Configuration

# PostgreSQL主数据库持久化存储
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-primary-pvc
  namespace: digital-employee
  labels:
    app: postgres
    component: primary
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# PostgreSQL从数据库持久化存储
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-replica-pvc
  namespace: digital-employee
  labels:
    app: postgres
    component: replica
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# PostgreSQL主数据库StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: digital-employee
  labels:
    app: postgres
    component: primary
    version: "15"
spec:
  serviceName: postgres-primary-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      component: primary
  template:
    metadata:
      labels:
        app: postgres
        component: primary
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: digital-employee-sa
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_NAME
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: POSTGRES_REPLICATION_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-primary-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      
      # PostgreSQL Exporter for Prometheus监控
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.14.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_NAME
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      volumes:
      - name: postgres-primary-storage
        persistentVolumeClaim:
          claimName: postgres-primary-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        secret:
          name: postgres-init-scripts
          defaultMode: 0755

---
# PostgreSQL从数据库StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: digital-employee
  labels:
    app: postgres
    component: replica
    version: "15"
spec:
  serviceName: postgres-replica-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      component: replica
  template:
    metadata:
      labels:
        app: postgres
        component: replica
    spec:
      serviceAccountName: digital-employee-sa
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: digital-employee-secrets
              key: POSTGRES_PASSWORD
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: digital-employee-config
              key: DATABASE_USER
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-replica-storage
          mountPath: /var/lib/postgresql/data
        command:
        - /bin/bash
        - -c
        - |
          if [ ! -s /var/lib/postgresql/data/pgdata/PG_VERSION ]; then
            pg_basebackup -h postgres-primary-svc -D /var/lib/postgresql/data/pgdata -U replicator -v -P -W
            echo 'standby_mode = on' >> /var/lib/postgresql/data/pgdata/recovery.conf
            echo 'primary_conninfo = '\''host=postgres-primary-svc port=5432 user=replicator'\''' >> /var/lib/postgresql/data/pgdata/recovery.conf
          fi
          postgres
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      
      volumes:
      - name: postgres-replica-storage
        persistentVolumeClaim:
          claimName: postgres-replica-pvc

---
# PostgreSQL主数据库服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary-svc
  namespace: digital-employee
  labels:
    app: postgres
    component: primary
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  selector:
    app: postgres
    component: primary

---
# PostgreSQL从数据库服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-svc
  namespace: digital-employee
  labels:
    app: postgres
    component: replica
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
    component: replica

---
# PostgreSQL读写分离服务（主）
apiVersion: v1
kind: Service
metadata:
  name: postgres-write-svc
  namespace: digital-employee
  labels:
    app: postgres
    service-type: write
    component: primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
    component: primary

---
# PostgreSQL读写分离服务（从）
apiVersion: v1
kind: Service
metadata:
  name: postgres-read-svc
  namespace: digital-employee
  labels:
    app: postgres
    service-type: read
    component: replica
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
    component: replica

---
# PostgreSQL配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: digital-employee
  labels:
    app: postgres
    component: config
data:
  postgresql.conf: |
    # PostgreSQL 15 Production Configuration
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL Settings
    wal_level = replica
    archive_mode = on
    archive_command = 'test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f'
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_size = 1GB
    
    # Logging Settings
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_statement = 'mod'
    
    # Performance Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Replication Settings
    hot_standby = on
    hot_standby_feedback = on
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # Local connections
    local   all             all                                     trust
    
    # IPv4 local connections
    host    all             all             127.0.0.1/32            md5
    host    all             all             0.0.0.0/0               md5
    
    # IPv6 local connections
    host    all             all             ::1/128                 md5
    
    # Replication connections
    host    replication     replicator      0.0.0.0/0               md5
    host    replication     replicator      ::0/0                   md5