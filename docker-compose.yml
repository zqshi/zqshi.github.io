# 数字员工系统生产级Docker Compose配置
# Digital Employee System Production Docker Compose Configuration
#
# 服务组件：
# - 数字员工核心应用 (多实例负载均衡)
# - PostgreSQL数据库 (主从复制)
# - Redis缓存集群
# - Nginx负载均衡器
# - Prometheus监控
# - Grafana仪表板
# - ELK日志堆栈

version: '3.8'

services:
  # =================== 核心应用服务 ===================
  digital-employee-app1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: digital-employee-app1
    restart: unless-stopped
    environment:
      - DIGITAL_EMPLOYEE_ENV=production
      - DIGITAL_EMPLOYEE_WORKERS=4
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/digital_employee
      - REDIS_URL=redis://redis-master:6379/0
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - PROMETHEUS_METRICS_PORT=8001
    volumes:
      - app-logs:/var/log/digital_employee
      - app-data:/var/lib/digital_employee
    networks:
      - digital-employee-network
    depends_on:
      - postgres-primary
      - redis-master
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  digital-employee-app2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: digital-employee-app2
    restart: unless-stopped
    environment:
      - DIGITAL_EMPLOYEE_ENV=production
      - DIGITAL_EMPLOYEE_WORKERS=4
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/digital_employee
      - REDIS_URL=redis://redis-master:6379/0
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - PROMETHEUS_METRICS_PORT=8001
    volumes:
      - app-logs:/var/log/digital_employee
      - app-data:/var/lib/digital_employee
    networks:
      - digital-employee-network
    depends_on:
      - postgres-primary
      - redis-master
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================== 负载均衡器 ===================
  nginx:
    image: nginx:1.24-alpine
    container_name: digital-employee-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - digital-employee-network
    depends_on:
      - digital-employee-app1
      - digital-employee-app2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== 数据库服务 ===================
  postgres-primary:
    image: postgres:15-alpine
    container_name: digital-employee-postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_DB=digital_employee
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - digital-employee-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d digital_employee"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-replica:
    image: postgres:15-alpine
    container_name: digital-employee-postgres-replica
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=postgres
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    networks:
      - digital-employee-network
    depends_on:
      - postgres-primary
    command: >
      bash -c "
      if [ ! -s /var/lib/postgresql/data/PG_VERSION ]; then
        pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U replicator -v -P -W
        echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf
        echo 'primary_conninfo = ''host=postgres-primary port=5432 user=replicator''' >> /var/lib/postgresql/data/recovery.conf
      fi
      postgres
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== Redis缓存集群 ===================
  redis-master:
    image: redis:7-alpine
    container_name: digital-employee-redis-master
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --replica-read-only no
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-master-data:/data
    networks:
      - digital-employee-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-replica:
    image: redis:7-alpine
    container_name: digital-employee-redis-replica
    restart: unless-stopped
    command: >
      redis-server
      --replicaof redis-master 6379
      --replica-read-only yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-replica-data:/data
    networks:
      - digital-employee-network
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== 监控服务 ===================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: digital-employee-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - digital-employee-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.1.0
    container_name: digital-employee-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}:${SMTP_PORT}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - digital-employee-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== 日志服务 ===================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: digital-employee-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - digital-employee-network
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: digital-employee-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - digital-employee-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: digital-employee-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - app-logs:/var/log/digital_employee:ro
      - nginx-logs:/var/log/nginx:ro
    networks:
      - digital-employee-network
    depends_on:
      - elasticsearch
    environment:
      - LS_JAVA_OPTS=-Xmx512m -Xms512m

  # =================== 文件浏览器 ===================
  filebrowser:
    image: filebrowser/filebrowser:v2.23.0
    container_name: digital-employee-filebrowser
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - app-logs:/srv/logs
      - app-data:/srv/data
    networks:
      - digital-employee-network
    environment:
      - FB_NOAUTH=false
    command: >
      --auth.method=json
      --auth.header=""
      --database=/database/filebrowser.db
      --root=/srv

  # =================== 自动备份服务 ===================
  backup:
    image: alpine:3.18
    container_name: digital-employee-backup
    restart: unless-stopped
    volumes:
      - postgres-primary-data:/backup/postgres:ro
      - redis-master-data:/backup/redis:ro
      - app-data:/backup/app:ro
      - ./docker/backup:/scripts:ro
      - backup-storage:/backup/storage
    networks:
      - digital-employee-network
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
    command: >
      sh -c "
      apk add --no-cache postgresql15-client redis aws-cli &&
      crond -f -d 8
      "
    depends_on:
      - postgres-primary
      - redis-master

# =================== 网络配置 ===================
networks:
  digital-employee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================== 卷配置 ===================
volumes:
  # 应用数据
  app-logs:
    driver: local
  app-data:
    driver: local
  
  # 数据库数据
  postgres-primary-data:
    driver: local
  postgres-replica-data:
    driver: local
  
  # Redis数据
  redis-master-data:
    driver: local
  redis-replica-data:
    driver: local
  
  # 监控数据
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # 日志数据
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local
  
  # 备份存储
  backup-storage:
    driver: local